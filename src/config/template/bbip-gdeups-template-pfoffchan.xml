<x:beans xmlns:x="http://www.springframework.org/schema/beans"
	xmlns="http://www.bocom.com/schema/jump-core" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
						http://www.bocom.com/schema/jump-core http://www.bocom.com/schema/jump-core-1.0.xsd">



	<!-- <flow-template id="eups.payOnlineTemplateExt">
		<step id="init" useCtxState="true" transactional="txTemplate">
			交易检查前处理
			<action id="preCheckAction" place-holder="false" />

			检查交易控制信息
			<action id="preAction" ref="eups.checkComTxnCtlAction"
				operations="checkThdTxnCtlNormal" />
			检查个人协议信息，如果“是否验约” isChkAgr 为"1"时检查
			<action id="preAction" ref="eups.checkCusAgrAction" />
			<action id="preAction" ref="eups.preparePaymentInfoAction" />
			记账前检查请求方信息
			检查请求方流水号是否重复 reqJrnNo
			<action id="preAction" ref="eups.checkRequestInfoAction"
				operations="checkRequestJournal" />
			检查渠道限额，如果配置了渠道限额则检查
			<action id="preAction" ref="eups.checkChlAmtLimAction" />
			记账前处理
			<action id="preHostAction" place-holder="true" />

			<action id="initAction" ref="eups.initPaymentInfoAction" />
			<next on="BP_STATE_NORMAL" to="DECISION_OPER1" />
			<next on="*" to="finalize" />
		</step>
		某些渠道（如生活馆）请求时会上送isNeedDeduct字段，用来标记是否需要分行记帐
		<decision id="DECISION_OPER1">
			<script>isNeedDeduct</script>
			<next on="0" to="businessCBStep" />
			<next on="1" to="businessTHDStep" />
		</decision>
		调用代收付记帐时，代收付会自动调用冲正，此处无需银行冲正
		<step id="businessCBStep" useCtxState="true" transactional="txTemplate">
			<action id="businessCBAction" ref="eups.bbipPaymentExt" />
			<next on="*" to="saveCBStep" />
		</step>
		<step id="saveCBStep" useCtxState="true" transactional="txTemplate">
			<action id="saveCBAction" ref="eups.saveCBPaymentResultAction" />
			<next on="*" to="businessTHDStep" />
			<next on="BP_STATE_UNKOWN_FAIL" to="rollback" />
			<end on="BP_STATE_FAIL" />
		</step>
		<step id="businessTHDStep" useCtxState="true" transactional="txTemplate">
			第三方缴费前处理
			<action id="preThdAction" place-holder="true" />

			外发第三方缴费
			<action id="businessTHDAction" ref="eups.paymentToTHDActionExt" />
			<next on="BP_STATE_NORMAL" to="afterThdStep" />
			<next on="BP_STATE_REVERSAL_FAIL" to="afterThdStep" />
			除了成功其他的都进行自动区分冲正
			<next on="*" to="rollback" />
		</step>
		<step id="afterThdStep" next="finalize" useCtxState="true"
			transactional="txTemplate">
			<action id="aftThdAction" place-holder="true" />
			交易成功累加渠道限额，如果配置了渠道限额则进行累加
			<action id="sumAmtAction" ref="eups.sumChlTotamtAction" />
		</step>
		<step id="finalize" useCtxState="true" transactional="txTemplate">
			<action id="finalizeAction" ref="eups.savePaymentResultAction" />
		</step>
		调起自动冲正
		<step id="rollback" next="finalize" useCtxState="true"
			transactional="txTemplate">
			<action id="rollbackAction" ref="eups.automaticReversalTHDAndCBAction" />
		</step>
	</flow-template> -->
	
	
	
		<!-- 联机抹账 -->
			<!-- <flow-template id="eups.cancelOnlineExtTemplate">
				<step id="init" useCtxState="true" transactional="txTemplate">
					交易前检查
					第三方交易控制检查（默认正常交易）
					<action id="preAction" ref="eups.checkComTxnCtlAction"
						operations="checkThdTxnCtlNormal" />
					<action id="preAction" ref="eups.checkBeforeCancelAction"
						operations="checkBeforeCancel" />
					联机抹账预处理
					<action id="initAction" ref="eups.initCancelInfoAction" />
					<next on="BP_STATE_NORMAL" to="businessTHDStep" />
					<next on="*" to="finalize" />
				</step>
				<step id="businessTHDStep" useCtxState="true" transactional="txTemplate">
					<action id="preCalAction" place-holder="true" />
					<action id="businessTHDAction" ref="eups.cancelToTHDExtAction" />   要改 
					<next on="BP_STATE_SUCCESS" to="businessCBStep" />
					<next on="*" to="finalize" />
				</step>
				<step id="businessCBStep" next="finalize" useCtxState="true"
					transactional="txTemplate">
					<action id="businessCBAction" ref="eups.bbipPaymentCancelUsingReversalExt" />
					<action id="businessCBAction" ref="eups.processCBCancelResultAction" />
				</step>
				<step id="finalize" useCtxState="true" transactional="txTemplate">
					<action id="aftCalAction" place-holder="true" />
					<action id="finalizeAction" ref="eups.saveCancelResultAction" />
				</step>
			</flow-template>	 -->
		


<!-- 自动抹帐： 根据流水表第三方状态和主机状态决定抹账方向 -->
	<!-- <flow-template id="eups.autoCancelTemplateExt">
		<step id="init" useCtxState="true" transactional="txTemplate">
			交易前检查
			第三方交易控制检查（默认正常交易）
			<action id="preAction" ref="eups.checkComTxnCtlAction" operations="checkThdTxnCtlNormal" />
			<action id="preAction" ref="eups.checkBeforeCancelAction" operations="checkBeforeCancel" />
			联机抹账预处理
			<action id="initAction" ref="eups.initCancelInfoAction" />
			<next on="BP_STATE_NORMAL" to="autoCancelPayment" />
			<next on="*" to="finalize" />
		</step>
		<step id="autoCancelPayment" next="REVERSE_TYP" useCtxState="true"
			transactional="txTemplate">
			<action id="preAction" ref="eups.checkBeforeCancelAction" operations="autoCancelDistinguish" />
		</step>
		<decision id="REVERSE_TYP">
			<script>tradeTxnDir</script>
			<next on="OL" to="businessTHDStep" />
			<next on="BU" to="businessCBStep" />
			<next on="TU" to="businessTHDStep" />
		</decision>
		<step id="businessTHDStep" useCtxState="true" transactional="txTemplate">
			<action id="preCalAction" place-holder="true" />
			<action id="businessTHDAction" ref="eups.cancelToTHDActionExt" />
			<next on="BP_STATE_SUCCESS" to="REVERSE_TYP1" />
			<next on="*" to="finalize" />
		</step>
		<decision id="REVERSE_TYP1">
			<script>tradeTxnDir</script>
			<next on="OL" to="businessCBStep" />
			<next on="TU" to="finalize" />
		</decision>
		<step id="businessCBStep" next="finalize" useCtxState="true"
			transactional="txTemplate">
			<action id="businessCBAction" ref="eups.bbipPaymentCancelUsingReversalExt" />
			<action id="businessCBAction" ref="eups.processCBCancelResultAction" />
		</step>
		<step id="finalize" useCtxState="true" transactional="txTemplate">
			<action id="aftCalAction" place-holder="true" />
			<action id="finalizeAction" ref="eups.saveCancelResultAction" />
		</step>
	</flow-template> -->
	
	<!-- 单边记账模板（无冲正） -->
	<flow-template id="eups.payUnilateralNoRvsTemplateExt">
		<step id="init" useCtxState="true" transactional="txTemplate">		
		    <action id="preCheckAction" place-holder="false" />
		    
			<action id="preAction" place-holder="true" />
			<action id="initAction" place-holder="true" />
			<next on="BP_STATE_NORMAL" to="businessProcessing" />
			<next on="*" to="finalize" />
			<end on="BUSINESS_PROCESSNIG_STATE_TRANS_FAIL"/>
		</step>
		<step id="businessProcessing" useCtxState="true" transactional="txTemplate">
			<action id="businessAction" place-holder="true" />
			<next on="BP_STATE_NORMAL" to="sumAmtStep" />
			<next on="*" to="finalize" />
		</step>
		<step id="sumAmtStep"  next="finalize"  useCtxState="true" transactional="txTemplate">
			<!-- 交易成功累加渠道限额，如果配置了渠道限额则进行累加 -->
			<action id="sumAmtAction" ref="eups.sumChlTotamtAction" />
		</step>
		<step id="finalize" useCtxState="true" transactional="txTemplate">
			<action id="finalizeAction" place-holder="true" />
		</step>
	</flow-template>
	
		<!-- 福彩清算轧差 -->
	<flow-template id="gdeups.lotClearTemplate">
		<step id="init" useCtxState="true" transactional="txTemplate">		 <!-- 数据准备，获取系统配置等 -->
		    <action id="initPre" place-holder="false" />  
			<next on="*" to="cbDfDealStep" />  
		</step>
		<step id="cbDfDealStep" useCtxState="true" transactional="txTemplate">  <!-- 垫款处理 -->
			<action id="dfPayDel" place-holder="true" />
			<action id="updDfRst" place-holder="true" />
			<next on="BP_STATE_REVAL" to="rollback" />
			<next on="*" to="cbGcDealStep" /> 
		</step>
		<step id="cbGcDealStep"   useCtxState="true" transactional="txTemplate">  <!-- 轧差处理 -->
			<action id="gcPayDel" place-holder="true" />
			<action id="updGcRst" place-holder="true"  />
			<next on="BP_STATE_REVAL" to="rollback" />  
			<end on="*"/>
		</step>
		<step id="rollback" useCtxState="true" transactional="txTemplate">   <!-- 冲正-->
			<action id="rollback" place-holder="true" />
		</step>
	</flow-template>
	
	
	<!-- 凭条退费 -->
	<flow-template id="gdeupsb.onlineCancelBankFlowTran">
		<step id="prepare" useCtxState="true"  transactional="txTemplate">
			<action id="chkBeforeCancelAct" place-holder="true"/>
			<next on="*" to="simpleCancelAccBankAct" />
		</step>
		<step id="simpleCancelAccBankAct" useCtxState="true" transactional="txTemplate">
			<action id="simpleCancelAccBankAct" place-holder="true" />
			<action id="aftCancelAction" place-holder="true" />
			<next on="regTransRollBackFlag" to="regTransRollBackAct" />
			<next on="complete"  to="finalize"/>
			
		</step>
		<step id="regTransRollBackAct" useCtxState="true" transactional="txTemplate">
			<action id="preRegTransRollBackAct" place-holder="true" />
			<action id="regTransRollBackAct" place-holder="true" />
			<action id="aftRegTransRollBackAct" place-holder="true" />
			<end on="*"/>
		</step>
		<step id="finalize" useCtxState="true" transactional="txTemplate">
			<action id="finalizeAction" place-holder="true" />
		<end on="*"/>
		</step> 
	</flow-template>
	
	<!-- 打发票 -->
	<flow-template id="gdeupsb.addPrintInvoicFlow">
		<step id="prepare" useCtxState="true"  transactional="txTemplate">
			<action id="chkBeforeAct" place-holder="true"/>
			<next on="*" to="addPrintInvoicAct" />
		</step>
		<step id="addPrintInvoicAct" useCtxState="true" transactional="txTemplate">
			<action id="preAddPrintInvoicAct" place-holder="true" />	
			<next on="complete"  to="finalize"/>
			<next on="callThd"   to="callThirdAct"/>
			<end on="fail" />		
		</step>
		<step id="callThirdAct" useCtxState="true" transactional="txTemplate">
			<action id="callThirdAction" place-holder="true" />
			
			<next on="complete"  to="finalize"/>
			
			<next on="error" to="regTransRollBackAct" /> 
			<end on="*"/>
			
		</step>
		<step id="regTransRollBackAct" useCtxState="true" transactional="txTemplate">
			
			<action id="checkRollBackAct"/>
			<action id="regTransRollBackAct"/>
			
			<end on="*"/>
		</step>
		<step id="finalize" useCtxState="true" transactional="txTemplate">
			<action id="finalizeAction" place-holder="true" />
		<end on="*"/>
		</step> 
	</flow-template>
	
	         
     <simple-template id="gdgaseups.simpleTran" transactional="txTemplate">
		<action id="act" place-holder="true" />
	</simple-template>
	
		<!-- 自动区分抹帐： 根据流水表第三方状态和主机状态决定抹账方向 -->
	<flow-template id="eups.autoCancelTemplateAdd">
		<step id="init" useCtxState="true" transactional="txTemplate">
			<!-- 交易前检查 -->
			<action id="preIntAction" place-holder="true"/>
			<!-- 第三方交易控制检查（默认正常交易） -->
			<action id="preAction" ref="eups.checkComTxnCtlAction" operations="checkThdTxnCtlNormal" />
			<action id="preAction" ref="eups.checkBeforeCancelAction" operations="checkBeforeCancel" />
			<!-- 联机抹账预处理 -->
			<action id="initAction" ref="eups.initCancelInfoAction" />
			<next on="BP_STATE_NORMAL" to="autoCancelPayment" />
			<next on="*" to="finalize" />
		</step>
		<step id="autoCancelPayment" next="REVERSE_TYP" useCtxState="true"
			transactional="txTemplate">
			<action id="preAction" ref="eups.checkBeforeCancelAction" operations="autoCancelDistinguish" />
		</step>
		<decision id="REVERSE_TYP">
			<script>tradeTxnDir</script>
			<next on="OL" to="businessTHDStep" />
			<next on="BU" to="businessCBStep" />
			<next on="TU" to="businessTHDStep" />
		</decision>
		<step id="businessTHDStep" useCtxState="true" transactional="txTemplate">
			<action id="preCalAction" place-holder="true" />
			<action id="businessTHDAction" ref="eups.cancelToTHDAction" />
			<next on="BP_STATE_SUCCESS" to="REVERSE_TYP1" />
			<next on="*" to="finalize" />
		</step>
		<decision id="REVERSE_TYP1">
			<script>tradeTxnDir</script>
			<next on="OL" to="businessCBStep" />
			<next on="TU" to="finalize" />
		</decision>
		<step id="businessCBStep" next="finalize" useCtxState="true"
			transactional="txTemplate">
			<action id="businessCBAction" ref="eups.bbipPaymentCancelUsingReversal" />
			<action id="businessCBAction" ref="eups.processCBCancelResultAction" />
		</step>
		<step id="finalize" useCtxState="true" transactional="txTemplate">
			<action id="aftCalAction" place-holder="true" />
			<action id="finalizeAction" ref="eups.saveCancelResultAction" />
		</step>
	</flow-template>
	
	<!-- 对账 -->
	<flow-template id="gdeupsb.checkBankFileToThirdTemplate">
		<step id="checkPrepare" useCtxState="true" transactional="txTemplate">
			<action id="checkPrepareAction" place-holder="true" />
			<next on="*" to="befCheckFile" />
			
		</step>
		<step id="befCheckFile" useCtxState="true" transactional="txTemplate">
			<action id="beforeCheckFileAction" place-holder="true" />
			<next on="BP_STATE_NORMAL" to="checkBankFileProcessing" />
			<end on="*" />
		</step>
		<step id="checkBankFileProcessing" useCtxState="true" transactional="txTemplate">
			<action id="checkBkFileToThirdStrategyAction" place-holder="true" />
			<next on="*" to="aftCheckFile" />
		</step>
		<step id="aftCheckFile" useCtxState="true" transactional="txTemplate">
			<action id="afterCheckFileAction" place-holder="true" />
			<end on="*" />
		</step>
	</flow-template>
	
	 <!-- 个人代扣协议签约 -->
	<flow-template id="gdeupsb.commInsCusAgentTemplate">
		<!-- 协议操作前处理 -->
		<step id="init" useCtxState="true" transactional="txTemplate">
			<action id="preAction"/>
			<next on="BP_STATE_NORMAL" to="callACPS" />
			<end on="*"/>
		</step>
		<!-- 发代收付 -->
		<step id="callACPS" useCtxState="true"  transactional="txTemplate">
			<action id="callACPSAction" place-holder="true" />
			<next on="BP_STATE_NORMAL" to="callThd" />
			
			<end on="*" />
		</step>
		<!-- 发第三方-->
		<step id="callThd"  useCtxState="true" transactional="txTemplate">
			<action id="callThdAction" />
			<end on="*" />
		</step>
	</flow-template>
	
	 <!-- 个人代扣协议修改 -->
	<flow-template id="gdeupsb.commOprCusAgentTemplate">
		<!-- 协议操作前处理 -->
		<step id="init" useCtxState="true" transactional="txTemplate">
			<action id="preAction"/>
			<next on="BP_STATE_NORMAL" to="callACPS" />
			<end on="*"/>
		</step>
		<!-- 发代收付 -->
		<step id="callACPS" useCtxState="true"  transactional="txTemplate">
			<action id="callACPSAction" place-holder="true" />
			<next on="BP_STATE_NORMAL" to="callThd" />
			<end on="*"/>
		</step>
		<!-- 发第三方-->
		<step id="callThd" useCtxState="true" transactional="txTemplate">
			<action id="callThdAction" place-holder="true" />
			<end on="*"/>
		</step>
		
	</flow-template>
	
	 <!-- 个人代扣协议删除 -->
	<flow-template id="gdeupsb.delAgentTemplate">
		<!-- 协议操作前处理 -->
		<step id="init" useCtxState="true" transactional="txTemplate">
			<action id="preAction"/>
			<next on="BP_STATE_NORMAL" to="callACPS" />
			<end on="*"/>
		</step>
		<!-- 发代收付 -->
		<step id="callACPS" useCtxState="true"  transactional="txTemplate">
			<action id="callACPSAction" place-holder="true" />
			<next on="BP_STATE_NORMAL" to="preCallThd" />
			<end on="*"/>
		</step>
		<!-- 发第三方前预处理-->
		<step id="preCallThd" useCtxState="true"  transactional="txTemplate">
			<action id="preCallThdAction" place-holder="true" />
			<next on="BP_STATE_NORMAL" to="callThd" />
			<end on="*"/>
		</step>
		<!-- 发第三方-->
		<step id="callThd" useCtxState="true" transactional="txTemplate">
			<action id="callThdAction" place-holder="true" />
			<end on="*"/>
		</step>
		
	</flow-template>
	<!-- 珠海路桥作废发票退费 -->
	<flow-template id="gdeupsb.invCancelTemplate">
		<!-- 协议操作前处理 -->
		<step id="init" useCtxState="true" transactional="txTemplate">
			<action id="preAction"/>
			<next on="BP_STATE_NORMAL" to="callACPS" />
			<end on="*"/>
		</step>
		<!-- 发代收付 -->
		<step id="callACPS" useCtxState="true"  transactional="txTemplate">
			<action id="callACPSAction" place-holder="true" />
			<next on="BP_STATE_NORMAL" to="callThd" />
			<end on="*"/>
		</step>
		<!-- 发第三方-->
		<step id="callThd" useCtxState="true" transactional="txTemplate">
			<action id="callThdAction" place-holder="true" />
			<end on="*"/>
		</step>
		
	</flow-template>
	
	
	<!-- 电力自动清算模版 -->
	<flow-template id="gdeupsb.eleAutoClearTempelate">
		<step id="init" useCtxState="true" transactional="txTemplate">		
		    <action id="preCallAction" place-holder="false" />
			<next on="*" to="callHostPrc" />
			<end on="BP_STATE_FAIL"/>
		</step>
		<step id="callHostPrc" useCtxState="true" transactional="txTemplate">
			<action id="callHost" place-holder="true" />
			<next on="BP_STATE_NORMAL" to="aftCallPrc" />
			<end on="BP_STATE_FAIL"/>
		</step>
		<step id="aftCallPrc"  useCtxState="true" transactional="txTemplate">
			<action id="aftCall"  place-holder="true"/>
			<end on="*"/>
		</step>
	</flow-template>
	
	 <!-- 个人代扣协议修改 -->
	<flow-template id="gdeupsb.changeWatAgent">
		<!-- 发第三方-->
		<step id="callThd" useCtxState="true" transactional="txTemplate">
			<action id="callThdAction" place-holder="true" />
			<next on="BP_STATE_NORMAL" to="callACPS" />
			<end on="*"/>
		</step>
		<!-- 发代收付 -->
		<step id="callACPS" useCtxState="true"  transactional="txTemplate">
			<action id="callACPSAction" place-holder="true" />
			
			<end on="*"/>
		</step>
		
		
	</flow-template>
	
	 <!-- 个人代扣协议修改 -->
	<flow-template id="gdeupsb.watBatchTemplete">
		
		<step id="preStep" useCtxState="true" transactional="txTemplate">
			<action id="preAction" place-holder="true" />
			<next on="BP_STATE_NORMAL" to="dealStep" />
			<end on="*"/>
		</step>
		<step id="dealStep" useCtxState="true" transactional="txTemplate">
			<action id="dealAction" place-holder="true" />
			<next on="BP_STATE_NORMAL" to="dtlDealStep" />
			<end on="*"/>
		</step>
		
		<step id="dtlDealStep" useCtxState="true"  transactional="txTemplate">
			<action id="aftAction" place-holder="true" />
			<end on="*"/>
		</step>
		
		
	</flow-template>

</x:beans>